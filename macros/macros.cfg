# macros
[gcode_macro _olli_globals]
variable_print_min: ()
variable_print_max: ()
variable_nozzle_size: 0.0
variable_filament_load_length: 10
variable_filament_load_speed: 5
variable_purge_margin: 0
variable_purge_length: 10
variable_purge_speed: 20
variable_move_speed: 40
variable_park_speed: 80
variable_safe_home_x: "middle"
variable_safe_home_y: "middle"

gcode:
  {% set toolhead = printer.toolhead %}
  {% set extruder = toolhead.extruder|string %}
  {% set nozzle = printer.configfile.settings[extruder].nozzle_diameter|float %}
  {% set output = [] %}
  SET_GCODE_VARIABLE MACRO=_olli_globals VARIABLE=print_min VALUE="{
    (toolhead.axis_minimum.x, toolhead.axis_minimum.y)}"
  SET_GCODE_VARIABLE MACRO=_olli_globals VARIABLE=print_max VALUE="{
    (toolhead.axis_maximum.x, toolhead.axis_maximum.y)}"
  SET_GCODE_VARIABLE MACRO=_olli_globals VARIABLE=nozzle_size VALUE="{nozzle}"
  
  #overwritte globals with options
  {% set options = printer["gcode_macro _olli_options"] %}
  {% set olli = printer["gcode_macro _olli_globals"] %}

  {% for k in options %}
    {% if k not in olli %}
      {% set dummy = output.append("%s is not valid for _OLLI_OPTIONS." | format(k)) %}
    {% elif olli[k] is string %}
      SET_GCODE_VARIABLE MACRO=_olli_globals VARIABLE={k
        } VALUE="'{options[k]|replace('\\','\\\\')|replace('\'','\\\'')
                             |replace('\"','\\\"')}'"
    {% elif olli[k] is float %}
      SET_GCODE_VARIABLE MACRO=_olli_globals VARIABLE={k
        } VALUE="{options[k]|float}"
      {% if k == "nozzle_size" %}
        {% set nozzle = options[k]|float %}
        SET_DRAW_PARAMS WIDTH={nozzle*1.25} HEIGHT={nozzle*0.625}
        {% set dummy = output.append("set nozzle size to %s " | format(nozzle)) %}
      {% endif %}
    {% elif olli[k] is integer or olli[k] is boolean %}
      SET_GCODE_VARIABLE MACRO=_olli_globals VARIABLE={k} VALUE="{options[k]|int}"
    {% elif olli[k] is mapping %}
      {% if options[k] is not mapping %}
        {% set dummy = output.append("%s requires a mapping type." |
                         format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_olli_globals VARIABLE={k
        } VALUE="{options[k]|replace('\"','\\\"')}"
    {% elif olli[k] is sequence %}
      {% if options[k] is not sequence %}
        {% set dummy = output.append("%s requires a sequence type." |
                         format(k)) %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=_olli_globals VARIABLE={k
        } VALUE="{options[k]|replace('\"','\\\"')}"
    {% else %}
      {% set dummy = output.append("%s is not a valid type for _OLLI_OPTIONS." |
                        format(k)) %}
    {% endif %}
  {% endfor %}

  #initial draw params
  { action_respond_info(output|sort|join('\n')) }

[delayed_gcode INIT_GLOBALS]
# This runs once at startup and initializes all macros.
initial_duration: 1
gcode:
  _OLLI_GLOBALS

  {% set toolhead = printer.toolhead %}
  {% set extruder = toolhead.extruder|string %}
    # This is any end-user gcode that need to run after macro initialization.
  _OLLI_OPTIONS
  ollivars
  drawvars

[gcode_macro ollivars]
description: Lists global variables used by klipper-macros.
  Usage: OLLIVARS [SEARCH=<search_string>]
gcode:
  {% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
  {% set olli = printer["gcode_macro _olli_globals"] %}
  {% set output = [] %}
  {% for k in olli %}
    {% if SEARCH in k %}
      {% set dummy = output.append(k ~ ": " ~ olli[k]) %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output|sort|join('\n')) }

[gcode_macro drawvars]
description: Lists global variables used by klipper-macros.
  Usage: DRAWVARS [SEARCH=<search_string>]
gcode:
  {% set SEARCH = params.SEARCH|default(params.S|default(""))|lower %}
  {% set dparams = printer["gcode_macro set_draw_params"] %}
  {% set output = [] %}
  {% for k in dparams %}
    {% if SEARCH in k %}
      {% set dummy = output.append(k ~ ": " ~ dparams[k]) %}
    {% endif %}
  {% endfor %}
  { action_respond_info(output|sort|join('\n')) }

[gcode_macro INIT_PRINT]
gcode:
  {% set olli = printer["gcode_macro _olli_globals"] %}
  {% for k in params %}
    {% set kl = k|lower %}
    {% if kl in olli %}
      {% set v = params[k] %}
      SET_GCODE_VARIABLE MACRO=_olli_globals VARIABLE={kl} VALUE="{v}"
    {% endif %}
  {% endfor %}

[gcode_macro START_PRINT]
description: Inserted by slicer at start of print.
  Usage: PRINT_START BED=<temp> EXTRUDER=<temp>
                     [MESH_MIN=<x,y>] [MESH_MAX=<x,y>]
                     [NOZZLE_SIZE=<mm>] [MESH=1|0]
gcode:
  {% set olli = printer["gcode_macro _olli_globals"] %}
  {% set BED_TEMP = params.BED|default(50)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}
  {% set NOZZLE_SIZE = params.NOZZLE_SIZE|default(olli.nozzle_size)|float %}
  {% set MESH_MIN = params.MESH_MIN|default(None) %}
  {% set MESH_MAX = params.MESH_MAX|default(None) %}
  {% set MESH = params.MESH|default(1) %}
  {% set MESH_NAME = "MESH-" + BED_TEMP|int|string + "C" %}
  #reset
  G90 ; use absolute coordinates
  M82 ; extruder absolute mode
  G92 E0 ; reset extruder
  SET_GCODE_OFFSET Z=0.0
  SET_PRESSURE_ADVANCE ADVANCE=0
  BED_MESH_CLEAR

  SET_LED LED=rgbstrip1 RED=0.0 GREEN=0.8 BLUE=0.0
  #inital heatup without wait
  M104 S100 ; nozzle no ooze temperature
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
  #conditional homing
  MAYBE_HOME
  G1 X{olli.print_min[0]} Y{olli.print_min[1]} F{olli.move_speed * 60}

  SET_LED LED=rgbstrip1 RED=0.5 GREEN=0.0 BLUE=0.0
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}
  #Heat soak
  _HEAT_WAIT MINUTES=3 MSG="Heatsoak..."  
  {% if MESH == 1 %}
    SET_LED LED=rgbstrip1 RED=0.8 GREEN=0.8 BLUE=0.0
    Z_TILT_ADJUST
    G28 Z
    BED_MESH_CALIBRATE PROFILE={MESH_NAME}
  {% endif %}
  
  SET_LED LED=rgbstrip1 RED=0.8 GREEN=0.0 BLUE=0.0
  M104 S{EXTRUDER_TEMP} ; set final nozzle temp
  G1 X{olli.print_min[0]} Y{olli.print_min[1]} F{olli.move_speed * 60} ; move to ooze position
  M109 S{EXTRUDER_TEMP} ; wait for nozzle temp to stabilize
  # purge line etc.
  SET_LED LED=rgbstrip1 RED=0.0 GREEN=0.8 BLUE=0.0
  DRAW_PURGE_LINE WIDTH="{NOZZLE_SIZE * 1.25}" HEIGHT="{NOZZLE_SIZE * 0.625
                  }"{% if MESH_MIN %} PRINT_MIN={MESH_MIN}{% endif
                  %}{% if MESH_MAX %} PRINT_MAX={MESH_MAX}{% endif %}
  SET_LED LED=rgbstrip1 RED=0.8 GREEN=0.8 BLUE=0.8
  
[gcode_macro END_PRINT]
description: Inserted by slicer at end of print.
  Usage: PRINT_END
gcode:
  SET_LED LED=rgbstrip1 RED=0.0 GREEN=0.8 BLUE=0.0
  M400
  G91 ; Set coordinates to relative
  G1 Z0.2
  {% set olli = printer["gcode_macro _olli_globals"] %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set min       = printer.toolhead.axis_minimum %}
  {% set x_pos     = olli.print_min[0] %}
  {% set y_pos     = olli.print_max[1] %}
  {% set z_pos     = [act.z+20,max.z]|min %}
  G90
  G1 X{x_pos} F{olli.park_speed * 60}
  M83
  {% if printer.extruder.can_extrude %}
    G1 E2 F800
    G1 E-18 F800
  {% endif %}
  G1 Y{y_pos} Z{z_pos} F{olli.park_speed * 60} ; present print
  M400
  ; reset
  G90 ; use absolute coordinates
  M82 ; extruder absolute mode
  G92 E0 ; reset extruder
  SET_GCODE_OFFSET Z=0.0
  SET_PRESSURE_ADVANCE ADVANCE=0
  M140 S0 ; turn off heatbed
  M104 S0 ; turn off temperature
  M107 ; turn off fan
  M84 ; disable motors
  SET_LED LED=rgbstrip1 RED=0.16 GREEN=0.0 BLUE=0.8

[gcode_macro PARK_FILAMENT]
description: Move filament to cold zone
  Usage: _PARK_FILAMENT
gcode:
  SAVE_GCODE_STATE NAME=parkfilament
  M83
  {% if printer.extruder.can_extrude %}
    G1 E2 F800
    G1 E-18 F800
  {% endif %}
  RESTORE_GCODE_STATE NAME=parkfilament MOVE=0
  
[gcode_macro set_draw_params]
description: Sets the default parameters used by DRAW_LINE_TO.
  Usage: SET_DRAW_PARAMS [HEIGHT=<mm>] [WIDTH=<mm>] [FEEDRATE=<mm/m>]
variable_height: 0.2
variable_width: 0.0 # Set to nozzle_diameter at startup
variable_feedrate: 1200
gcode:
  {% set dparams = printer["gcode_macro set_draw_params"] %}
  {% for k in params %}
    {% set kl = k|lower %}
    {% if kl in dparams %}
      {% if dparams[kl] is float %}
        {% set v = params[k]|float %}
      {% elif dparams[kl] is integer %}
        {% set v = params[k]|int %}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=set_draw_params VARIABLE={kl} VALUE="{v}"
    {% endif %}
  {% endfor %}

[gcode_macro draw_line_to]
description: Extrudes a line of filament at the specified height and width from
  the current coordinate to the supplied XY coordinate. (The height is used only
  to calculate the extrusion volume.)
  Usage: DRAW_LINE_TO [X=<pos>] [Y=<pos>] [HEIGHT=<mm>] [WIDTH=<mm>]
                      [FEEDRATE=<mm/m>]
gcode:
  {% set dparams = printer["gcode_macro set_draw_params"] %}
  {% set position = printer.gcode_move.gcode_position %}
  {% set X = params.X|default(position.x)|float %}
  {% set Y = params.Y|default(position.y)|float %}
  {% set HEIGHT = params.HEIGHT|default(dparams.height)|float %}
  {% set WIDTH = params.WIDTH|default(dparams.width)|float %}
  {% set FEEDRATE = params.FEEDRATE|default(dparams.feedrate)|int %}

  {% set distance = ((X - position.x) ** 2 + (Y - position.y) ** 2) ** 0.5 %}

  {% set filament_area = 3.14159 *
       (printer.configfile.settings[
          printer.toolhead.extruder].filament_diameter ** 2) / 4 %}
  {% set E = distance * ((WIDTH * HEIGHT) / filament_area) %}

  # Use the base state call here so offset adjustments get persisted.
  SAVE_GCODE_STATE NAME=drawline

  G90
  G92 E0.0
  G1 X{"%.3f" % X} Y{"%.3f" % Y} E{"%.5f" % E} F{FEEDRATE}
  RESTORE_GCODE_STATE NAME=drawline MOVE=0

[gcode_macro draw_purge_line]
description: Purges the specified length of filament as a line (or rows of
  lines) in front of the supplied print area. If no print area is specified the
  purge lines are drawn at the front edge of the maximum printable area. If no
  printable area is set it defaults to the XY axis limits.
  Usage: DRAW_PURGE_LINE [PRINT_MIN=<X,Y>] [PRINT_MAX=<X,Y>] [HEIGHT=<mm>]
                         [WIDTH=<mm>] [LENGTH=<mm>] 
gcode:
  # TODO: Make this work for delta printers.
  {% set olli = printer["gcode_macro _olli_globals"] %}
  {% set origin = printer.gcode_move.homing_origin %}
  {% if "PRINT_MIN" in params %}
    {% set PRINT_MIN = (
        (params.PRINT_MIN.split(",")[0]|float, olli.print_min[0])|max,
        (params.PRINT_MIN.split(",")[1]|float, olli.print_min[1])|max
      ) %}
  {% else %}
    {% set PRINT_MIN = olli.print_min %}
  {% endif %}
  {% if "PRINT_MAX" in params %}
    {% set PRINT_MAX = (
        (params.PRINT_MAX.split(",")[0]|float, olli.print_max[0])|min,
        (params.PRINT_MAX.split(",")[1]|float, olli.print_max[1])|min
      ) %}
  {% else %}
    {% set PRINT_MAX = olli.print_max %}
  {% endif %}
  {% set extruder = printer.toolhead.extruder|string %}
  {% set HEIGHT = params.HEIGHT|default(olli.nozzle_size * 0.5)|float %}
  {% set WIDTH = params.WIDTH|default(olli.nozzle_size * 1.25)|float %}
  {% set LENGTH = params.LENGTH|default(olli.purge_length)|float %}
  
  {% set dparams = printer["gcode_macro set_draw_params"] %}
  {% set filament_area = 3.14159 *
       (printer.configfile.settings[extruder].filament_diameter ** 2) / 4 %}
  {% set purge_length = (LENGTH * filament_area) / (WIDTH * HEIGHT) %}
  {% set printable_length = PRINT_MAX[0] - PRINT_MIN[0] %}
  {% set purge_rows = (purge_length / printable_length)|round(0,'ceil')|int %}
  {% set printable_inset = (printable_length - purge_length / purge_rows) / 2 %}
  {% set PRINT_MIN = (PRINT_MIN[0] + printable_inset, PRINT_MIN[1]) %}
  {% set PRINT_MAX = (PRINT_MAX[0] - printable_inset, PRINT_MAX[1]) %}
  # This will purge into the print area when the bed is filled to the front.
  {% set y_start = (olli.print_min[1], PRINT_MIN[1] - olli.purge_margin - (purge_rows + 0.5) * WIDTH )|max %}
  G90
  # Jog to the front left corner to get strings out of the print area.
  G1 X{"%.3f" % (PRINT_MIN[0] - 30, olli.print_min[0])|max} Y{
    "%.3f" % (y_start - 10, olli.print_min[1])|max} F{olli.move_speed*60}
  # Move to the starting corner.
  G1 X{"%.3f" % (PRINT_MIN[0] - 2, olli.print_min[0])|max} Y{"%.3f" % y_start} Z{
    "%.4f" % HEIGHT} F{olli.move_speed*60}
  # Prime the extruder before beginning the purge lines.
  {% if olli.filament_load_length > 0 %}
    G92 E0.0
    G1 E{"%.3f" % olli.filament_load_length} F{olli.filament_load_speed*60}
  {% endif %}
  G92 E0.0
  # Purge.
  set_draw_params HEIGHT="{HEIGHT}" WIDTH="{WIDTH}" FEEDRATE="{olli.purge_speed*60}"
  G1 X{"%.3f" % PRINT_MIN[0]} F{olli.purge_speed*60}
  {% for n in range(purge_rows - 1) %}
    {% set x_pos = PRINT_MIN[0] if n % 2 else PRINT_MAX[0] %}
    DRAW_LINE_TO X="{x_pos}" Y="{WIDTH * n + y_start}"
    DRAW_LINE_TO X="{x_pos}" Y="{WIDTH * (n + 1) + y_start}"
  {% endfor %}
  {% set x_pos = PRINT_MAX[0] if purge_rows % 2 else PRINT_MIN[0] %}
  DRAW_LINE_TO X="{x_pos}" Y="{WIDTH * (purge_rows - 1) + y_start}"
  G92 E0.0

[gcode_macro _HEAT_WAIT]
description: Heating cycle waiting routine
gcode:
    {% set MINUTES = params.MINUTES|default(10)|int %}
    {% set MSG = params.MSG|default("Warming...")|string %}
    {% for i in range(0, MINUTES) %}
        RESPOND MSG="{MSG} {MINUTES-i} minute{% if MINUTES-i > 1 %}s{% endif %} remaining."
        {% for s in range(0, 60) %}
            SET_LED LED=rgbstrip1 RED=0.8 GREEN=0.0 BLUE=0.0
            G4 P500
            SET_LED LED=rgbstrip1 RED=0.5 GREEN=0.0 BLUE=0.0
            G4 P500
        {% endfor %}
    {% endfor %}
    RESPOND MSG="{MSG} finished"
